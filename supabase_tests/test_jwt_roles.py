import jwt
import json
import urllib.request
import os
import pytest

# Supabase project URL and JWKS endpoint
SUPABASE_URL = os.environ.get("SUPABASE_URL")
if not SUPABASE_URL:
    raise ValueError("SUPABASE_URL environment variable not set.")
JWKS_URL = f"{SUPABASE_URL}/auth/v1/.well-known/jwks.json"

def get_jwks():
    """Fetches the JWKS from the Supabase endpoint."""
    with urllib.request.urlopen(JWKS_URL) as response:
        if response.status != 200:
            raise Exception(f"Failed to fetch JWKS: HTTP {response.status}")
        return json.loads(response.read().decode('utf-8'))

def get_public_key(kid, jwks, alg):
    """Finds the public key in the JWKS that matches the given Key ID (kid) and algorithm."""
    for jwk in jwks.get("keys", []):
        if jwk.get("kid") == kid and jwk.get("alg") == alg:
            if alg == "RS256":
                return jwt.algorithms.RSAAlgorithm.from_jwk(jwk)
            elif alg == "ES256":
                return jwt.algorithms.ECAlgorithm.from_jwk(jwk)
    raise ValueError(f"Public key not found in JWKS for kid {kid} and alg {alg}")

def verify_jwt(token):
    """Verifies the JWT using the public key from the JWKS endpoint."""
    unverified_header = jwt.get_unverified_header(token)
    kid = unverified_header.get("kid")
    alg = unverified_header.get("alg")

    if alg == "HS256":
        pytest.skip("HS256 tokens cannot be verified with JWKS.")

    jwks = get_jwks()
    public_key = get_public_key(kid, jwks, alg)

    decoded_token = jwt.decode(
        token,
        public_key,
        algorithms=[alg],
        audience="authenticated",
        issuer=f"{SUPABASE_URL}/auth/v1",
    )
    return decoded_token

# Placeholder JWTs for testing different scenarios
# In a real scenario, these would be generated by your application or a test utility
JWT_ADMIN_ROLE = os.environ.get("JWT_ADMIN_ROLE", "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoiYWRtaW4iLCJpc3MiOiJzdXBhYmFzZS1kZW1vIiwic3ViIjoiMTIzNDU2Nzg5MCIsIm5hbWUiOiJKb2huIERvZSIsImlhdCI6MTUxNjIzOTAyMn0.s_1_2_3_4_5_6_7_8_9_0_1_2_3_4_5_6_7_8_9_0_1_2_3_4_5_6_7_8_9_0")
JWT_USER_ROLE = os.environ.get("JWT_USER_ROLE", "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoidXNlciIsImlzcyI6InN1cGFiYXNlLWRlbW8iLCJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.s_1_2_3_4_5_6_7_8_9_0_1_2_3_4_5_6_7_8_9_0_1_2_3_4_5_6_7_8_9_0")
JWT_NO_ROLE = os.environ.get("JWT_NO_ROLE", "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwic3ViIjoiMTIzNDU2Nzg5MCIsIm5hbWUiOiJKb2huIERvZSIsImlhdCI6MTUxNjIzOTAyMn0.s_1_2_3_4_5_6_7_8_9_0_1_2_3_4_5_6_7_8_9_0_1_2_3_4_5_6_7_8_9_0")
JWT_INVALID_SIGNATURE = os.environ.get("JWT_INVALID_SIGNATURE", "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoidXNlciIsImlzcyI6InN1cGFiYXNlLWRlbW8iLCJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.invalid_signature_1_2_3_4_5_6_7_8_9_0_1_2_3_4_5_6_7_8_9_0_1_2_3_4_5_6_7_8_9_0")
JWT_EXPIRED = os.environ.get("JWT_EXPIRED", "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoidXNlciIsImlzcyI6InN1cGFiYXNlLWRlbW8iLCJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJleHAiOjE1MTYyMzkxMjJ9.s_1_2_3_4_5_6_7_8_9_0_1_2_3_4_5_6_7_8_9_0_1_2_3_4_5_6_7_8_9_0")


def test_jwt_admin_role():
    """Tests verification of a JWT with 'admin' role."""
    try:
        decoded_token = verify_jwt(JWT_ADMIN_ROLE)
        assert decoded_token["role"] == "admin"
        print(f"Admin token verified. Role: {decoded_token['role']}")
    except jwt.PyJWTError as e:
        pytest.fail(f"Admin token verification failed: {e}")

def test_jwt_user_role():
    """Tests verification of a JWT with 'user' role."""
    try:
        decoded_token = verify_jwt(JWT_USER_ROLE)
        assert decoded_token["role"] == "user"
        print(f"User token verified. Role: {decoded_token['role']}")
    except jwt.PyJWTError as e:
        pytest.fail(f"User token verification failed: {e}")

def test_jwt_no_role():
    """Tests verification of a JWT with no explicit 'role' claim."""
    try:
        decoded_token = verify_jwt(JWT_NO_ROLE)
        assert "role" not in decoded_token or decoded_token["role"] is None
        print(f"No role token verified. Decoded: {decoded_token}")
    except jwt.PyJWTError as e:
        pytest.fail(f"No role token verification failed: {e}")

def test_jwt_invalid_signature():
    """Tests that a JWT with an invalid signature is rejected."""
    with pytest.raises(jwt.InvalidSignatureError):
        verify_jwt(JWT_INVALID_SIGNATURE)
    print("Invalid signature token correctly rejected.")

def test_jwt_expired():
    """Tests that an expired JWT is rejected."""
    with pytest.raises(jwt.ExpiredSignatureError):
        verify_jwt(JWT_EXPIRED)
    print("Expired token correctly rejected.")

